// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/21/2020 14:50:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MIPS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIPS_vlg_sample_tst(
	Clk,
	Res,
	sampler_tx
);
input  Clk;
input  Res;
output sampler_tx;

reg sample;
time current_time;
always @(Clk or Res)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MIPS_vlg_check_tst (
	ALUControl,
	ALUOut,
	ALUSrc,
	Branch,
	Input,
	MemContro,
	MemOut,
	MemRead,
	MemToReg,
	MemWrite,
	PCin,
	REGOut,
	ReadData1,
	ReadData2,
	RegDst,
	RegWrite,
	sampler_rx
);
input [2:0] ALUControl;
input [31:0] ALUOut;
input  ALUSrc;
input  Branch;
input [31:0] Input;
input  MemContro;
input [31:0] MemOut;
input  MemRead;
input  MemToReg;
input  MemWrite;
input [31:0] PCin;
input [31:0] REGOut;
input [31:0] ReadData1;
input [31:0] ReadData2;
input  RegDst;
input  RegWrite;
input sampler_rx;

reg [2:0] ALUControl_expected;
reg [31:0] ALUOut_expected;
reg  ALUSrc_expected;
reg  Branch_expected;
reg [31:0] Input_expected;
reg  MemContro_expected;
reg [31:0] MemOut_expected;
reg  MemRead_expected;
reg  MemToReg_expected;
reg  MemWrite_expected;
reg [31:0] PCin_expected;
reg [31:0] REGOut_expected;
reg [31:0] ReadData1_expected;
reg [31:0] ReadData2_expected;
reg  RegDst_expected;
reg  RegWrite_expected;

reg [2:0] ALUControl_prev;
reg [31:0] ALUOut_prev;
reg  ALUSrc_prev;
reg  Branch_prev;
reg [31:0] Input_prev;
reg  MemContro_prev;
reg [31:0] MemOut_prev;
reg  MemRead_prev;
reg  MemToReg_prev;
reg  MemWrite_prev;
reg [31:0] PCin_prev;
reg [31:0] REGOut_prev;
reg [31:0] ReadData1_prev;
reg [31:0] ReadData2_prev;
reg  RegDst_prev;
reg  RegWrite_prev;

reg [2:0] ALUControl_expected_prev;
reg [31:0] ALUOut_expected_prev;
reg  ALUSrc_expected_prev;
reg  Branch_expected_prev;
reg [31:0] Input_expected_prev;
reg  MemContro_expected_prev;
reg [31:0] MemOut_expected_prev;
reg  MemRead_expected_prev;
reg  MemToReg_expected_prev;
reg  MemWrite_expected_prev;
reg [31:0] PCin_expected_prev;
reg [31:0] REGOut_expected_prev;
reg [31:0] ReadData1_expected_prev;
reg [31:0] ReadData2_expected_prev;
reg  RegDst_expected_prev;
reg  RegWrite_expected_prev;

reg [2:0] last_ALUControl_exp;
reg [31:0] last_ALUOut_exp;
reg  last_ALUSrc_exp;
reg  last_Branch_exp;
reg [31:0] last_Input_exp;
reg  last_MemContro_exp;
reg [31:0] last_MemOut_exp;
reg  last_MemRead_exp;
reg  last_MemToReg_exp;
reg  last_MemWrite_exp;
reg [31:0] last_PCin_exp;
reg [31:0] last_REGOut_exp;
reg [31:0] last_ReadData1_exp;
reg [31:0] last_ReadData2_exp;
reg  last_RegDst_exp;
reg  last_RegWrite_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUControl_prev = ALUControl;
	ALUOut_prev = ALUOut;
	ALUSrc_prev = ALUSrc;
	Branch_prev = Branch;
	Input_prev = Input;
	MemContro_prev = MemContro;
	MemOut_prev = MemOut;
	MemRead_prev = MemRead;
	MemToReg_prev = MemToReg;
	MemWrite_prev = MemWrite;
	PCin_prev = PCin;
	REGOut_prev = REGOut;
	ReadData1_prev = ReadData1;
	ReadData2_prev = ReadData2;
	RegDst_prev = RegDst;
	RegWrite_prev = RegWrite;
end

// update expected /o prevs

always @(trigger)
begin
	ALUControl_expected_prev = ALUControl_expected;
	ALUOut_expected_prev = ALUOut_expected;
	ALUSrc_expected_prev = ALUSrc_expected;
	Branch_expected_prev = Branch_expected;
	Input_expected_prev = Input_expected;
	MemContro_expected_prev = MemContro_expected;
	MemOut_expected_prev = MemOut_expected;
	MemRead_expected_prev = MemRead_expected;
	MemToReg_expected_prev = MemToReg_expected;
	MemWrite_expected_prev = MemWrite_expected;
	PCin_expected_prev = PCin_expected;
	REGOut_expected_prev = REGOut_expected;
	ReadData1_expected_prev = ReadData1_expected;
	ReadData2_expected_prev = ReadData2_expected;
	RegDst_expected_prev = RegDst_expected;
	RegWrite_expected_prev = RegWrite_expected;
end


// expected ALUControl[ 2 ]
initial
begin
	ALUControl_expected[2] = 1'bX;
end 
// expected ALUControl[ 1 ]
initial
begin
	ALUControl_expected[1] = 1'bX;
end 
// expected ALUControl[ 0 ]
initial
begin
	ALUControl_expected[0] = 1'bX;
end 
// expected ALUOut[ 31 ]
initial
begin
	ALUOut_expected[31] = 1'bX;
end 
// expected ALUOut[ 30 ]
initial
begin
	ALUOut_expected[30] = 1'bX;
end 
// expected ALUOut[ 29 ]
initial
begin
	ALUOut_expected[29] = 1'bX;
end 
// expected ALUOut[ 28 ]
initial
begin
	ALUOut_expected[28] = 1'bX;
end 
// expected ALUOut[ 27 ]
initial
begin
	ALUOut_expected[27] = 1'bX;
end 
// expected ALUOut[ 26 ]
initial
begin
	ALUOut_expected[26] = 1'bX;
end 
// expected ALUOut[ 25 ]
initial
begin
	ALUOut_expected[25] = 1'bX;
end 
// expected ALUOut[ 24 ]
initial
begin
	ALUOut_expected[24] = 1'bX;
end 
// expected ALUOut[ 23 ]
initial
begin
	ALUOut_expected[23] = 1'bX;
end 
// expected ALUOut[ 22 ]
initial
begin
	ALUOut_expected[22] = 1'bX;
end 
// expected ALUOut[ 21 ]
initial
begin
	ALUOut_expected[21] = 1'bX;
end 
// expected ALUOut[ 20 ]
initial
begin
	ALUOut_expected[20] = 1'bX;
end 
// expected ALUOut[ 19 ]
initial
begin
	ALUOut_expected[19] = 1'bX;
end 
// expected ALUOut[ 18 ]
initial
begin
	ALUOut_expected[18] = 1'bX;
end 
// expected ALUOut[ 17 ]
initial
begin
	ALUOut_expected[17] = 1'bX;
end 
// expected ALUOut[ 16 ]
initial
begin
	ALUOut_expected[16] = 1'bX;
end 
// expected ALUOut[ 15 ]
initial
begin
	ALUOut_expected[15] = 1'bX;
end 
// expected ALUOut[ 14 ]
initial
begin
	ALUOut_expected[14] = 1'bX;
end 
// expected ALUOut[ 13 ]
initial
begin
	ALUOut_expected[13] = 1'bX;
end 
// expected ALUOut[ 12 ]
initial
begin
	ALUOut_expected[12] = 1'bX;
end 
// expected ALUOut[ 11 ]
initial
begin
	ALUOut_expected[11] = 1'bX;
end 
// expected ALUOut[ 10 ]
initial
begin
	ALUOut_expected[10] = 1'bX;
end 
// expected ALUOut[ 9 ]
initial
begin
	ALUOut_expected[9] = 1'bX;
end 
// expected ALUOut[ 8 ]
initial
begin
	ALUOut_expected[8] = 1'bX;
end 
// expected ALUOut[ 7 ]
initial
begin
	ALUOut_expected[7] = 1'bX;
end 
// expected ALUOut[ 6 ]
initial
begin
	ALUOut_expected[6] = 1'bX;
end 
// expected ALUOut[ 5 ]
initial
begin
	ALUOut_expected[5] = 1'bX;
end 
// expected ALUOut[ 4 ]
initial
begin
	ALUOut_expected[4] = 1'bX;
end 
// expected ALUOut[ 3 ]
initial
begin
	ALUOut_expected[3] = 1'bX;
end 
// expected ALUOut[ 2 ]
initial
begin
	ALUOut_expected[2] = 1'bX;
end 
// expected ALUOut[ 1 ]
initial
begin
	ALUOut_expected[1] = 1'bX;
end 
// expected ALUOut[ 0 ]
initial
begin
	ALUOut_expected[0] = 1'bX;
end 

// expected ALUSrc
initial
begin
	ALUSrc_expected = 1'bX;
end 

// expected Branch
initial
begin
	Branch_expected = 1'bX;
end 
// expected \Input [ 31 ]
initial
begin
	Input_expected[31] = 1'bX;
end 
// expected \Input [ 30 ]
initial
begin
	Input_expected[30] = 1'bX;
end 
// expected \Input [ 29 ]
initial
begin
	Input_expected[29] = 1'bX;
end 
// expected \Input [ 28 ]
initial
begin
	Input_expected[28] = 1'bX;
end 
// expected \Input [ 27 ]
initial
begin
	Input_expected[27] = 1'bX;
end 
// expected \Input [ 26 ]
initial
begin
	Input_expected[26] = 1'bX;
end 
// expected \Input [ 25 ]
initial
begin
	Input_expected[25] = 1'bX;
end 
// expected \Input [ 24 ]
initial
begin
	Input_expected[24] = 1'bX;
end 
// expected \Input [ 23 ]
initial
begin
	Input_expected[23] = 1'bX;
end 
// expected \Input [ 22 ]
initial
begin
	Input_expected[22] = 1'bX;
end 
// expected \Input [ 21 ]
initial
begin
	Input_expected[21] = 1'bX;
end 
// expected \Input [ 20 ]
initial
begin
	Input_expected[20] = 1'bX;
end 
// expected \Input [ 19 ]
initial
begin
	Input_expected[19] = 1'bX;
end 
// expected \Input [ 18 ]
initial
begin
	Input_expected[18] = 1'bX;
end 
// expected \Input [ 17 ]
initial
begin
	Input_expected[17] = 1'bX;
end 
// expected \Input [ 16 ]
initial
begin
	Input_expected[16] = 1'bX;
end 
// expected \Input [ 15 ]
initial
begin
	Input_expected[15] = 1'bX;
end 
// expected \Input [ 14 ]
initial
begin
	Input_expected[14] = 1'bX;
end 
// expected \Input [ 13 ]
initial
begin
	Input_expected[13] = 1'bX;
end 
// expected \Input [ 12 ]
initial
begin
	Input_expected[12] = 1'bX;
end 
// expected \Input [ 11 ]
initial
begin
	Input_expected[11] = 1'bX;
end 
// expected \Input [ 10 ]
initial
begin
	Input_expected[10] = 1'bX;
end 
// expected \Input [ 9 ]
initial
begin
	Input_expected[9] = 1'bX;
end 
// expected \Input [ 8 ]
initial
begin
	Input_expected[8] = 1'bX;
end 
// expected \Input [ 7 ]
initial
begin
	Input_expected[7] = 1'bX;
end 
// expected \Input [ 6 ]
initial
begin
	Input_expected[6] = 1'bX;
end 
// expected \Input [ 5 ]
initial
begin
	Input_expected[5] = 1'bX;
end 
// expected \Input [ 4 ]
initial
begin
	Input_expected[4] = 1'bX;
end 
// expected \Input [ 3 ]
initial
begin
	Input_expected[3] = 1'bX;
end 
// expected \Input [ 2 ]
initial
begin
	Input_expected[2] = 1'bX;
end 
// expected \Input [ 1 ]
initial
begin
	Input_expected[1] = 1'bX;
end 
// expected \Input [ 0 ]
initial
begin
	Input_expected[0] = 1'bX;
end 

// expected MemRead
initial
begin
	MemRead_expected = 1'bX;
end 

// expected MemToReg
initial
begin
	MemToReg_expected = 1'bX;
end 

// expected MemWrite
initial
begin
	MemWrite_expected = 1'bX;
end 
// expected REGOut[ 31 ]
initial
begin
	REGOut_expected[31] = 1'bX;
end 
// expected REGOut[ 30 ]
initial
begin
	REGOut_expected[30] = 1'bX;
end 
// expected REGOut[ 29 ]
initial
begin
	REGOut_expected[29] = 1'bX;
end 
// expected REGOut[ 28 ]
initial
begin
	REGOut_expected[28] = 1'bX;
end 
// expected REGOut[ 27 ]
initial
begin
	REGOut_expected[27] = 1'bX;
end 
// expected REGOut[ 26 ]
initial
begin
	REGOut_expected[26] = 1'bX;
end 
// expected REGOut[ 25 ]
initial
begin
	REGOut_expected[25] = 1'bX;
end 
// expected REGOut[ 24 ]
initial
begin
	REGOut_expected[24] = 1'bX;
end 
// expected REGOut[ 23 ]
initial
begin
	REGOut_expected[23] = 1'bX;
end 
// expected REGOut[ 22 ]
initial
begin
	REGOut_expected[22] = 1'bX;
end 
// expected REGOut[ 21 ]
initial
begin
	REGOut_expected[21] = 1'bX;
end 
// expected REGOut[ 20 ]
initial
begin
	REGOut_expected[20] = 1'bX;
end 
// expected REGOut[ 19 ]
initial
begin
	REGOut_expected[19] = 1'bX;
end 
// expected REGOut[ 18 ]
initial
begin
	REGOut_expected[18] = 1'bX;
end 
// expected REGOut[ 17 ]
initial
begin
	REGOut_expected[17] = 1'bX;
end 
// expected REGOut[ 16 ]
initial
begin
	REGOut_expected[16] = 1'bX;
end 
// expected REGOut[ 15 ]
initial
begin
	REGOut_expected[15] = 1'bX;
end 
// expected REGOut[ 14 ]
initial
begin
	REGOut_expected[14] = 1'bX;
end 
// expected REGOut[ 13 ]
initial
begin
	REGOut_expected[13] = 1'bX;
end 
// expected REGOut[ 12 ]
initial
begin
	REGOut_expected[12] = 1'bX;
end 
// expected REGOut[ 11 ]
initial
begin
	REGOut_expected[11] = 1'bX;
end 
// expected REGOut[ 10 ]
initial
begin
	REGOut_expected[10] = 1'bX;
end 
// expected REGOut[ 9 ]
initial
begin
	REGOut_expected[9] = 1'bX;
end 
// expected REGOut[ 8 ]
initial
begin
	REGOut_expected[8] = 1'bX;
end 
// expected REGOut[ 7 ]
initial
begin
	REGOut_expected[7] = 1'bX;
end 
// expected REGOut[ 6 ]
initial
begin
	REGOut_expected[6] = 1'bX;
end 
// expected REGOut[ 5 ]
initial
begin
	REGOut_expected[5] = 1'bX;
end 
// expected REGOut[ 4 ]
initial
begin
	REGOut_expected[4] = 1'bX;
end 
// expected REGOut[ 3 ]
initial
begin
	REGOut_expected[3] = 1'bX;
end 
// expected REGOut[ 2 ]
initial
begin
	REGOut_expected[2] = 1'bX;
end 
// expected REGOut[ 1 ]
initial
begin
	REGOut_expected[1] = 1'bX;
end 
// expected REGOut[ 0 ]
initial
begin
	REGOut_expected[0] = 1'bX;
end 
// expected ReadData1[ 31 ]
initial
begin
	ReadData1_expected[31] = 1'bX;
end 
// expected ReadData1[ 30 ]
initial
begin
	ReadData1_expected[30] = 1'bX;
end 
// expected ReadData1[ 29 ]
initial
begin
	ReadData1_expected[29] = 1'bX;
end 
// expected ReadData1[ 28 ]
initial
begin
	ReadData1_expected[28] = 1'bX;
end 
// expected ReadData1[ 27 ]
initial
begin
	ReadData1_expected[27] = 1'bX;
end 
// expected ReadData1[ 26 ]
initial
begin
	ReadData1_expected[26] = 1'bX;
end 
// expected ReadData1[ 25 ]
initial
begin
	ReadData1_expected[25] = 1'bX;
end 
// expected ReadData1[ 24 ]
initial
begin
	ReadData1_expected[24] = 1'bX;
end 
// expected ReadData1[ 23 ]
initial
begin
	ReadData1_expected[23] = 1'bX;
end 
// expected ReadData1[ 22 ]
initial
begin
	ReadData1_expected[22] = 1'bX;
end 
// expected ReadData1[ 21 ]
initial
begin
	ReadData1_expected[21] = 1'bX;
end 
// expected ReadData1[ 20 ]
initial
begin
	ReadData1_expected[20] = 1'bX;
end 
// expected ReadData1[ 19 ]
initial
begin
	ReadData1_expected[19] = 1'bX;
end 
// expected ReadData1[ 18 ]
initial
begin
	ReadData1_expected[18] = 1'bX;
end 
// expected ReadData1[ 17 ]
initial
begin
	ReadData1_expected[17] = 1'bX;
end 
// expected ReadData1[ 16 ]
initial
begin
	ReadData1_expected[16] = 1'bX;
end 
// expected ReadData1[ 15 ]
initial
begin
	ReadData1_expected[15] = 1'bX;
end 
// expected ReadData1[ 14 ]
initial
begin
	ReadData1_expected[14] = 1'bX;
end 
// expected ReadData1[ 13 ]
initial
begin
	ReadData1_expected[13] = 1'bX;
end 
// expected ReadData1[ 12 ]
initial
begin
	ReadData1_expected[12] = 1'bX;
end 
// expected ReadData1[ 11 ]
initial
begin
	ReadData1_expected[11] = 1'bX;
end 
// expected ReadData1[ 10 ]
initial
begin
	ReadData1_expected[10] = 1'bX;
end 
// expected ReadData1[ 9 ]
initial
begin
	ReadData1_expected[9] = 1'bX;
end 
// expected ReadData1[ 8 ]
initial
begin
	ReadData1_expected[8] = 1'bX;
end 
// expected ReadData1[ 7 ]
initial
begin
	ReadData1_expected[7] = 1'bX;
end 
// expected ReadData1[ 6 ]
initial
begin
	ReadData1_expected[6] = 1'bX;
end 
// expected ReadData1[ 5 ]
initial
begin
	ReadData1_expected[5] = 1'bX;
end 
// expected ReadData1[ 4 ]
initial
begin
	ReadData1_expected[4] = 1'bX;
end 
// expected ReadData1[ 3 ]
initial
begin
	ReadData1_expected[3] = 1'bX;
end 
// expected ReadData1[ 2 ]
initial
begin
	ReadData1_expected[2] = 1'bX;
end 
// expected ReadData1[ 1 ]
initial
begin
	ReadData1_expected[1] = 1'bX;
end 
// expected ReadData1[ 0 ]
initial
begin
	ReadData1_expected[0] = 1'bX;
end 
// expected ReadData2[ 31 ]
initial
begin
	ReadData2_expected[31] = 1'bX;
end 
// expected ReadData2[ 30 ]
initial
begin
	ReadData2_expected[30] = 1'bX;
end 
// expected ReadData2[ 29 ]
initial
begin
	ReadData2_expected[29] = 1'bX;
end 
// expected ReadData2[ 28 ]
initial
begin
	ReadData2_expected[28] = 1'bX;
end 
// expected ReadData2[ 27 ]
initial
begin
	ReadData2_expected[27] = 1'bX;
end 
// expected ReadData2[ 26 ]
initial
begin
	ReadData2_expected[26] = 1'bX;
end 
// expected ReadData2[ 25 ]
initial
begin
	ReadData2_expected[25] = 1'bX;
end 
// expected ReadData2[ 24 ]
initial
begin
	ReadData2_expected[24] = 1'bX;
end 
// expected ReadData2[ 23 ]
initial
begin
	ReadData2_expected[23] = 1'bX;
end 
// expected ReadData2[ 22 ]
initial
begin
	ReadData2_expected[22] = 1'bX;
end 
// expected ReadData2[ 21 ]
initial
begin
	ReadData2_expected[21] = 1'bX;
end 
// expected ReadData2[ 20 ]
initial
begin
	ReadData2_expected[20] = 1'bX;
end 
// expected ReadData2[ 19 ]
initial
begin
	ReadData2_expected[19] = 1'bX;
end 
// expected ReadData2[ 18 ]
initial
begin
	ReadData2_expected[18] = 1'bX;
end 
// expected ReadData2[ 17 ]
initial
begin
	ReadData2_expected[17] = 1'bX;
end 
// expected ReadData2[ 16 ]
initial
begin
	ReadData2_expected[16] = 1'bX;
end 
// expected ReadData2[ 15 ]
initial
begin
	ReadData2_expected[15] = 1'bX;
end 
// expected ReadData2[ 14 ]
initial
begin
	ReadData2_expected[14] = 1'bX;
end 
// expected ReadData2[ 13 ]
initial
begin
	ReadData2_expected[13] = 1'bX;
end 
// expected ReadData2[ 12 ]
initial
begin
	ReadData2_expected[12] = 1'bX;
end 
// expected ReadData2[ 11 ]
initial
begin
	ReadData2_expected[11] = 1'bX;
end 
// expected ReadData2[ 10 ]
initial
begin
	ReadData2_expected[10] = 1'bX;
end 
// expected ReadData2[ 9 ]
initial
begin
	ReadData2_expected[9] = 1'bX;
end 
// expected ReadData2[ 8 ]
initial
begin
	ReadData2_expected[8] = 1'bX;
end 
// expected ReadData2[ 7 ]
initial
begin
	ReadData2_expected[7] = 1'bX;
end 
// expected ReadData2[ 6 ]
initial
begin
	ReadData2_expected[6] = 1'bX;
end 
// expected ReadData2[ 5 ]
initial
begin
	ReadData2_expected[5] = 1'bX;
end 
// expected ReadData2[ 4 ]
initial
begin
	ReadData2_expected[4] = 1'bX;
end 
// expected ReadData2[ 3 ]
initial
begin
	ReadData2_expected[3] = 1'bX;
end 
// expected ReadData2[ 2 ]
initial
begin
	ReadData2_expected[2] = 1'bX;
end 
// expected ReadData2[ 1 ]
initial
begin
	ReadData2_expected[1] = 1'bX;
end 
// expected ReadData2[ 0 ]
initial
begin
	ReadData2_expected[0] = 1'bX;
end 

// expected RegDst
initial
begin
	RegDst_expected = 1'bX;
end 

// expected RegWrite
initial
begin
	RegWrite_expected = 1'bX;
end 

// expected MemContro
initial
begin
	MemContro_expected = 1'bX;
end 
// expected MemOut[ 31 ]
initial
begin
	MemOut_expected[31] = 1'bX;
end 
// expected MemOut[ 30 ]
initial
begin
	MemOut_expected[30] = 1'bX;
end 
// expected MemOut[ 29 ]
initial
begin
	MemOut_expected[29] = 1'bX;
end 
// expected MemOut[ 28 ]
initial
begin
	MemOut_expected[28] = 1'bX;
end 
// expected MemOut[ 27 ]
initial
begin
	MemOut_expected[27] = 1'bX;
end 
// expected MemOut[ 26 ]
initial
begin
	MemOut_expected[26] = 1'bX;
end 
// expected MemOut[ 25 ]
initial
begin
	MemOut_expected[25] = 1'bX;
end 
// expected MemOut[ 24 ]
initial
begin
	MemOut_expected[24] = 1'bX;
end 
// expected MemOut[ 23 ]
initial
begin
	MemOut_expected[23] = 1'bX;
end 
// expected MemOut[ 22 ]
initial
begin
	MemOut_expected[22] = 1'bX;
end 
// expected MemOut[ 21 ]
initial
begin
	MemOut_expected[21] = 1'bX;
end 
// expected MemOut[ 20 ]
initial
begin
	MemOut_expected[20] = 1'bX;
end 
// expected MemOut[ 19 ]
initial
begin
	MemOut_expected[19] = 1'bX;
end 
// expected MemOut[ 18 ]
initial
begin
	MemOut_expected[18] = 1'bX;
end 
// expected MemOut[ 17 ]
initial
begin
	MemOut_expected[17] = 1'bX;
end 
// expected MemOut[ 16 ]
initial
begin
	MemOut_expected[16] = 1'bX;
end 
// expected MemOut[ 15 ]
initial
begin
	MemOut_expected[15] = 1'bX;
end 
// expected MemOut[ 14 ]
initial
begin
	MemOut_expected[14] = 1'bX;
end 
// expected MemOut[ 13 ]
initial
begin
	MemOut_expected[13] = 1'bX;
end 
// expected MemOut[ 12 ]
initial
begin
	MemOut_expected[12] = 1'bX;
end 
// expected MemOut[ 11 ]
initial
begin
	MemOut_expected[11] = 1'bX;
end 
// expected MemOut[ 10 ]
initial
begin
	MemOut_expected[10] = 1'bX;
end 
// expected MemOut[ 9 ]
initial
begin
	MemOut_expected[9] = 1'bX;
end 
// expected MemOut[ 8 ]
initial
begin
	MemOut_expected[8] = 1'bX;
end 
// expected MemOut[ 7 ]
initial
begin
	MemOut_expected[7] = 1'bX;
end 
// expected MemOut[ 6 ]
initial
begin
	MemOut_expected[6] = 1'bX;
end 
// expected MemOut[ 5 ]
initial
begin
	MemOut_expected[5] = 1'bX;
end 
// expected MemOut[ 4 ]
initial
begin
	MemOut_expected[4] = 1'bX;
end 
// expected MemOut[ 3 ]
initial
begin
	MemOut_expected[3] = 1'bX;
end 
// expected MemOut[ 2 ]
initial
begin
	MemOut_expected[2] = 1'bX;
end 
// expected MemOut[ 1 ]
initial
begin
	MemOut_expected[1] = 1'bX;
end 
// expected MemOut[ 0 ]
initial
begin
	MemOut_expected[0] = 1'bX;
end 
// expected PCin[ 31 ]
initial
begin
	PCin_expected[31] = 1'bX;
end 
// expected PCin[ 30 ]
initial
begin
	PCin_expected[30] = 1'bX;
end 
// expected PCin[ 29 ]
initial
begin
	PCin_expected[29] = 1'bX;
end 
// expected PCin[ 28 ]
initial
begin
	PCin_expected[28] = 1'bX;
end 
// expected PCin[ 27 ]
initial
begin
	PCin_expected[27] = 1'bX;
end 
// expected PCin[ 26 ]
initial
begin
	PCin_expected[26] = 1'bX;
end 
// expected PCin[ 25 ]
initial
begin
	PCin_expected[25] = 1'bX;
end 
// expected PCin[ 24 ]
initial
begin
	PCin_expected[24] = 1'bX;
end 
// expected PCin[ 23 ]
initial
begin
	PCin_expected[23] = 1'bX;
end 
// expected PCin[ 22 ]
initial
begin
	PCin_expected[22] = 1'bX;
end 
// expected PCin[ 21 ]
initial
begin
	PCin_expected[21] = 1'bX;
end 
// expected PCin[ 20 ]
initial
begin
	PCin_expected[20] = 1'bX;
end 
// expected PCin[ 19 ]
initial
begin
	PCin_expected[19] = 1'bX;
end 
// expected PCin[ 18 ]
initial
begin
	PCin_expected[18] = 1'bX;
end 
// expected PCin[ 17 ]
initial
begin
	PCin_expected[17] = 1'bX;
end 
// expected PCin[ 16 ]
initial
begin
	PCin_expected[16] = 1'bX;
end 
// expected PCin[ 15 ]
initial
begin
	PCin_expected[15] = 1'bX;
end 
// expected PCin[ 14 ]
initial
begin
	PCin_expected[14] = 1'bX;
end 
// expected PCin[ 13 ]
initial
begin
	PCin_expected[13] = 1'bX;
end 
// expected PCin[ 12 ]
initial
begin
	PCin_expected[12] = 1'bX;
end 
// expected PCin[ 11 ]
initial
begin
	PCin_expected[11] = 1'bX;
end 
// expected PCin[ 10 ]
initial
begin
	PCin_expected[10] = 1'bX;
end 
// expected PCin[ 9 ]
initial
begin
	PCin_expected[9] = 1'bX;
end 
// expected PCin[ 8 ]
initial
begin
	PCin_expected[8] = 1'bX;
end 
// expected PCin[ 7 ]
initial
begin
	PCin_expected[7] = 1'bX;
end 
// expected PCin[ 6 ]
initial
begin
	PCin_expected[6] = 1'bX;
end 
// expected PCin[ 5 ]
initial
begin
	PCin_expected[5] = 1'bX;
end 
// expected PCin[ 4 ]
initial
begin
	PCin_expected[4] = 1'bX;
end 
// expected PCin[ 3 ]
initial
begin
	PCin_expected[3] = 1'bX;
end 
// expected PCin[ 2 ]
initial
begin
	PCin_expected[2] = 1'bX;
end 
// expected PCin[ 1 ]
initial
begin
	PCin_expected[1] = 1'bX;
end 
// expected PCin[ 0 ]
initial
begin
	PCin_expected[0] = 1'bX;
end 
// generate trigger
always @(ALUControl_expected or ALUControl or ALUOut_expected or ALUOut or ALUSrc_expected or ALUSrc or Branch_expected or Branch or Input_expected or Input or MemContro_expected or MemContro or MemOut_expected or MemOut or MemRead_expected or MemRead or MemToReg_expected or MemToReg or MemWrite_expected or MemWrite or PCin_expected or PCin or REGOut_expected or REGOut or ReadData1_expected or ReadData1 or ReadData2_expected or ReadData2 or RegDst_expected or RegDst or RegWrite_expected or RegWrite)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUControl = %b | expected ALUOut = %b | expected ALUSrc = %b | expected Branch = %b | expected Input = %b | expected MemContro = %b | expected MemOut = %b | expected MemRead = %b | expected MemToReg = %b | expected MemWrite = %b | expected PCin = %b | expected REGOut = %b | expected ReadData1 = %b | expected ReadData2 = %b | expected RegDst = %b | expected RegWrite = %b | ",ALUControl_expected_prev,ALUOut_expected_prev,ALUSrc_expected_prev,Branch_expected_prev,Input_expected_prev,MemContro_expected_prev,MemOut_expected_prev,MemRead_expected_prev,MemToReg_expected_prev,MemWrite_expected_prev,PCin_expected_prev,REGOut_expected_prev,ReadData1_expected_prev,ReadData2_expected_prev,RegDst_expected_prev,RegWrite_expected_prev);
	$display("| real ALUControl = %b | real ALUOut = %b | real ALUSrc = %b | real Branch = %b | real Input = %b | real MemContro = %b | real MemOut = %b | real MemRead = %b | real MemToReg = %b | real MemWrite = %b | real PCin = %b | real REGOut = %b | real ReadData1 = %b | real ReadData2 = %b | real RegDst = %b | real RegWrite = %b | ",ALUControl_prev,ALUOut_prev,ALUSrc_prev,Branch_prev,Input_prev,MemContro_prev,MemOut_prev,MemRead_prev,MemToReg_prev,MemWrite_prev,PCin_prev,REGOut_prev,ReadData1_prev,ReadData2_prev,RegDst_prev,RegWrite_prev);
`endif
	if (
		( ALUControl_expected_prev[0] !== 1'bx ) && ( ALUControl_prev[0] !== ALUControl_expected_prev[0] )
		&& ((ALUControl_expected_prev[0] !== last_ALUControl_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUControl[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUControl_expected_prev);
		$display ("     Real value = %b", ALUControl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUControl_exp[0] = ALUControl_expected_prev[0];
	end
	if (
		( ALUControl_expected_prev[1] !== 1'bx ) && ( ALUControl_prev[1] !== ALUControl_expected_prev[1] )
		&& ((ALUControl_expected_prev[1] !== last_ALUControl_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUControl[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUControl_expected_prev);
		$display ("     Real value = %b", ALUControl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUControl_exp[1] = ALUControl_expected_prev[1];
	end
	if (
		( ALUControl_expected_prev[2] !== 1'bx ) && ( ALUControl_prev[2] !== ALUControl_expected_prev[2] )
		&& ((ALUControl_expected_prev[2] !== last_ALUControl_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUControl[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUControl_expected_prev);
		$display ("     Real value = %b", ALUControl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUControl_exp[2] = ALUControl_expected_prev[2];
	end
	if (
		( ALUOut_expected_prev[0] !== 1'bx ) && ( ALUOut_prev[0] !== ALUOut_expected_prev[0] )
		&& ((ALUOut_expected_prev[0] !== last_ALUOut_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[0] = ALUOut_expected_prev[0];
	end
	if (
		( ALUOut_expected_prev[1] !== 1'bx ) && ( ALUOut_prev[1] !== ALUOut_expected_prev[1] )
		&& ((ALUOut_expected_prev[1] !== last_ALUOut_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[1] = ALUOut_expected_prev[1];
	end
	if (
		( ALUOut_expected_prev[2] !== 1'bx ) && ( ALUOut_prev[2] !== ALUOut_expected_prev[2] )
		&& ((ALUOut_expected_prev[2] !== last_ALUOut_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[2] = ALUOut_expected_prev[2];
	end
	if (
		( ALUOut_expected_prev[3] !== 1'bx ) && ( ALUOut_prev[3] !== ALUOut_expected_prev[3] )
		&& ((ALUOut_expected_prev[3] !== last_ALUOut_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[3] = ALUOut_expected_prev[3];
	end
	if (
		( ALUOut_expected_prev[4] !== 1'bx ) && ( ALUOut_prev[4] !== ALUOut_expected_prev[4] )
		&& ((ALUOut_expected_prev[4] !== last_ALUOut_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[4] = ALUOut_expected_prev[4];
	end
	if (
		( ALUOut_expected_prev[5] !== 1'bx ) && ( ALUOut_prev[5] !== ALUOut_expected_prev[5] )
		&& ((ALUOut_expected_prev[5] !== last_ALUOut_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[5] = ALUOut_expected_prev[5];
	end
	if (
		( ALUOut_expected_prev[6] !== 1'bx ) && ( ALUOut_prev[6] !== ALUOut_expected_prev[6] )
		&& ((ALUOut_expected_prev[6] !== last_ALUOut_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[6] = ALUOut_expected_prev[6];
	end
	if (
		( ALUOut_expected_prev[7] !== 1'bx ) && ( ALUOut_prev[7] !== ALUOut_expected_prev[7] )
		&& ((ALUOut_expected_prev[7] !== last_ALUOut_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[7] = ALUOut_expected_prev[7];
	end
	if (
		( ALUOut_expected_prev[8] !== 1'bx ) && ( ALUOut_prev[8] !== ALUOut_expected_prev[8] )
		&& ((ALUOut_expected_prev[8] !== last_ALUOut_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[8] = ALUOut_expected_prev[8];
	end
	if (
		( ALUOut_expected_prev[9] !== 1'bx ) && ( ALUOut_prev[9] !== ALUOut_expected_prev[9] )
		&& ((ALUOut_expected_prev[9] !== last_ALUOut_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[9] = ALUOut_expected_prev[9];
	end
	if (
		( ALUOut_expected_prev[10] !== 1'bx ) && ( ALUOut_prev[10] !== ALUOut_expected_prev[10] )
		&& ((ALUOut_expected_prev[10] !== last_ALUOut_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[10] = ALUOut_expected_prev[10];
	end
	if (
		( ALUOut_expected_prev[11] !== 1'bx ) && ( ALUOut_prev[11] !== ALUOut_expected_prev[11] )
		&& ((ALUOut_expected_prev[11] !== last_ALUOut_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[11] = ALUOut_expected_prev[11];
	end
	if (
		( ALUOut_expected_prev[12] !== 1'bx ) && ( ALUOut_prev[12] !== ALUOut_expected_prev[12] )
		&& ((ALUOut_expected_prev[12] !== last_ALUOut_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[12] = ALUOut_expected_prev[12];
	end
	if (
		( ALUOut_expected_prev[13] !== 1'bx ) && ( ALUOut_prev[13] !== ALUOut_expected_prev[13] )
		&& ((ALUOut_expected_prev[13] !== last_ALUOut_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[13] = ALUOut_expected_prev[13];
	end
	if (
		( ALUOut_expected_prev[14] !== 1'bx ) && ( ALUOut_prev[14] !== ALUOut_expected_prev[14] )
		&& ((ALUOut_expected_prev[14] !== last_ALUOut_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[14] = ALUOut_expected_prev[14];
	end
	if (
		( ALUOut_expected_prev[15] !== 1'bx ) && ( ALUOut_prev[15] !== ALUOut_expected_prev[15] )
		&& ((ALUOut_expected_prev[15] !== last_ALUOut_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[15] = ALUOut_expected_prev[15];
	end
	if (
		( ALUOut_expected_prev[16] !== 1'bx ) && ( ALUOut_prev[16] !== ALUOut_expected_prev[16] )
		&& ((ALUOut_expected_prev[16] !== last_ALUOut_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[16] = ALUOut_expected_prev[16];
	end
	if (
		( ALUOut_expected_prev[17] !== 1'bx ) && ( ALUOut_prev[17] !== ALUOut_expected_prev[17] )
		&& ((ALUOut_expected_prev[17] !== last_ALUOut_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[17] = ALUOut_expected_prev[17];
	end
	if (
		( ALUOut_expected_prev[18] !== 1'bx ) && ( ALUOut_prev[18] !== ALUOut_expected_prev[18] )
		&& ((ALUOut_expected_prev[18] !== last_ALUOut_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[18] = ALUOut_expected_prev[18];
	end
	if (
		( ALUOut_expected_prev[19] !== 1'bx ) && ( ALUOut_prev[19] !== ALUOut_expected_prev[19] )
		&& ((ALUOut_expected_prev[19] !== last_ALUOut_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[19] = ALUOut_expected_prev[19];
	end
	if (
		( ALUOut_expected_prev[20] !== 1'bx ) && ( ALUOut_prev[20] !== ALUOut_expected_prev[20] )
		&& ((ALUOut_expected_prev[20] !== last_ALUOut_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[20] = ALUOut_expected_prev[20];
	end
	if (
		( ALUOut_expected_prev[21] !== 1'bx ) && ( ALUOut_prev[21] !== ALUOut_expected_prev[21] )
		&& ((ALUOut_expected_prev[21] !== last_ALUOut_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[21] = ALUOut_expected_prev[21];
	end
	if (
		( ALUOut_expected_prev[22] !== 1'bx ) && ( ALUOut_prev[22] !== ALUOut_expected_prev[22] )
		&& ((ALUOut_expected_prev[22] !== last_ALUOut_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[22] = ALUOut_expected_prev[22];
	end
	if (
		( ALUOut_expected_prev[23] !== 1'bx ) && ( ALUOut_prev[23] !== ALUOut_expected_prev[23] )
		&& ((ALUOut_expected_prev[23] !== last_ALUOut_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[23] = ALUOut_expected_prev[23];
	end
	if (
		( ALUOut_expected_prev[24] !== 1'bx ) && ( ALUOut_prev[24] !== ALUOut_expected_prev[24] )
		&& ((ALUOut_expected_prev[24] !== last_ALUOut_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[24] = ALUOut_expected_prev[24];
	end
	if (
		( ALUOut_expected_prev[25] !== 1'bx ) && ( ALUOut_prev[25] !== ALUOut_expected_prev[25] )
		&& ((ALUOut_expected_prev[25] !== last_ALUOut_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[25] = ALUOut_expected_prev[25];
	end
	if (
		( ALUOut_expected_prev[26] !== 1'bx ) && ( ALUOut_prev[26] !== ALUOut_expected_prev[26] )
		&& ((ALUOut_expected_prev[26] !== last_ALUOut_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[26] = ALUOut_expected_prev[26];
	end
	if (
		( ALUOut_expected_prev[27] !== 1'bx ) && ( ALUOut_prev[27] !== ALUOut_expected_prev[27] )
		&& ((ALUOut_expected_prev[27] !== last_ALUOut_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[27] = ALUOut_expected_prev[27];
	end
	if (
		( ALUOut_expected_prev[28] !== 1'bx ) && ( ALUOut_prev[28] !== ALUOut_expected_prev[28] )
		&& ((ALUOut_expected_prev[28] !== last_ALUOut_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[28] = ALUOut_expected_prev[28];
	end
	if (
		( ALUOut_expected_prev[29] !== 1'bx ) && ( ALUOut_prev[29] !== ALUOut_expected_prev[29] )
		&& ((ALUOut_expected_prev[29] !== last_ALUOut_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[29] = ALUOut_expected_prev[29];
	end
	if (
		( ALUOut_expected_prev[30] !== 1'bx ) && ( ALUOut_prev[30] !== ALUOut_expected_prev[30] )
		&& ((ALUOut_expected_prev[30] !== last_ALUOut_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[30] = ALUOut_expected_prev[30];
	end
	if (
		( ALUOut_expected_prev[31] !== 1'bx ) && ( ALUOut_prev[31] !== ALUOut_expected_prev[31] )
		&& ((ALUOut_expected_prev[31] !== last_ALUOut_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOut[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOut_expected_prev);
		$display ("     Real value = %b", ALUOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOut_exp[31] = ALUOut_expected_prev[31];
	end
	if (
		( ALUSrc_expected_prev !== 1'bx ) && ( ALUSrc_prev !== ALUSrc_expected_prev )
		&& ((ALUSrc_expected_prev !== last_ALUSrc_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_expected_prev);
		$display ("     Real value = %b", ALUSrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUSrc_exp = ALUSrc_expected_prev;
	end
	if (
		( Branch_expected_prev !== 1'bx ) && ( Branch_prev !== Branch_expected_prev )
		&& ((Branch_expected_prev !== last_Branch_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Branch :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Branch_expected_prev);
		$display ("     Real value = %b", Branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Branch_exp = Branch_expected_prev;
	end
	if (
		( Input_expected_prev[0] !== 1'bx ) && ( Input_prev[0] !== Input_expected_prev[0] )
		&& ((Input_expected_prev[0] !== last_Input_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[0] = Input_expected_prev[0];
	end
	if (
		( Input_expected_prev[1] !== 1'bx ) && ( Input_prev[1] !== Input_expected_prev[1] )
		&& ((Input_expected_prev[1] !== last_Input_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[1] = Input_expected_prev[1];
	end
	if (
		( Input_expected_prev[2] !== 1'bx ) && ( Input_prev[2] !== Input_expected_prev[2] )
		&& ((Input_expected_prev[2] !== last_Input_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[2] = Input_expected_prev[2];
	end
	if (
		( Input_expected_prev[3] !== 1'bx ) && ( Input_prev[3] !== Input_expected_prev[3] )
		&& ((Input_expected_prev[3] !== last_Input_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[3] = Input_expected_prev[3];
	end
	if (
		( Input_expected_prev[4] !== 1'bx ) && ( Input_prev[4] !== Input_expected_prev[4] )
		&& ((Input_expected_prev[4] !== last_Input_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[4] = Input_expected_prev[4];
	end
	if (
		( Input_expected_prev[5] !== 1'bx ) && ( Input_prev[5] !== Input_expected_prev[5] )
		&& ((Input_expected_prev[5] !== last_Input_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[5] = Input_expected_prev[5];
	end
	if (
		( Input_expected_prev[6] !== 1'bx ) && ( Input_prev[6] !== Input_expected_prev[6] )
		&& ((Input_expected_prev[6] !== last_Input_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[6] = Input_expected_prev[6];
	end
	if (
		( Input_expected_prev[7] !== 1'bx ) && ( Input_prev[7] !== Input_expected_prev[7] )
		&& ((Input_expected_prev[7] !== last_Input_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[7] = Input_expected_prev[7];
	end
	if (
		( Input_expected_prev[8] !== 1'bx ) && ( Input_prev[8] !== Input_expected_prev[8] )
		&& ((Input_expected_prev[8] !== last_Input_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[8] = Input_expected_prev[8];
	end
	if (
		( Input_expected_prev[9] !== 1'bx ) && ( Input_prev[9] !== Input_expected_prev[9] )
		&& ((Input_expected_prev[9] !== last_Input_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[9] = Input_expected_prev[9];
	end
	if (
		( Input_expected_prev[10] !== 1'bx ) && ( Input_prev[10] !== Input_expected_prev[10] )
		&& ((Input_expected_prev[10] !== last_Input_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[10] = Input_expected_prev[10];
	end
	if (
		( Input_expected_prev[11] !== 1'bx ) && ( Input_prev[11] !== Input_expected_prev[11] )
		&& ((Input_expected_prev[11] !== last_Input_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[11] = Input_expected_prev[11];
	end
	if (
		( Input_expected_prev[12] !== 1'bx ) && ( Input_prev[12] !== Input_expected_prev[12] )
		&& ((Input_expected_prev[12] !== last_Input_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[12] = Input_expected_prev[12];
	end
	if (
		( Input_expected_prev[13] !== 1'bx ) && ( Input_prev[13] !== Input_expected_prev[13] )
		&& ((Input_expected_prev[13] !== last_Input_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[13] = Input_expected_prev[13];
	end
	if (
		( Input_expected_prev[14] !== 1'bx ) && ( Input_prev[14] !== Input_expected_prev[14] )
		&& ((Input_expected_prev[14] !== last_Input_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[14] = Input_expected_prev[14];
	end
	if (
		( Input_expected_prev[15] !== 1'bx ) && ( Input_prev[15] !== Input_expected_prev[15] )
		&& ((Input_expected_prev[15] !== last_Input_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[15] = Input_expected_prev[15];
	end
	if (
		( Input_expected_prev[16] !== 1'bx ) && ( Input_prev[16] !== Input_expected_prev[16] )
		&& ((Input_expected_prev[16] !== last_Input_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[16] = Input_expected_prev[16];
	end
	if (
		( Input_expected_prev[17] !== 1'bx ) && ( Input_prev[17] !== Input_expected_prev[17] )
		&& ((Input_expected_prev[17] !== last_Input_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[17] = Input_expected_prev[17];
	end
	if (
		( Input_expected_prev[18] !== 1'bx ) && ( Input_prev[18] !== Input_expected_prev[18] )
		&& ((Input_expected_prev[18] !== last_Input_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[18] = Input_expected_prev[18];
	end
	if (
		( Input_expected_prev[19] !== 1'bx ) && ( Input_prev[19] !== Input_expected_prev[19] )
		&& ((Input_expected_prev[19] !== last_Input_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[19] = Input_expected_prev[19];
	end
	if (
		( Input_expected_prev[20] !== 1'bx ) && ( Input_prev[20] !== Input_expected_prev[20] )
		&& ((Input_expected_prev[20] !== last_Input_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[20] = Input_expected_prev[20];
	end
	if (
		( Input_expected_prev[21] !== 1'bx ) && ( Input_prev[21] !== Input_expected_prev[21] )
		&& ((Input_expected_prev[21] !== last_Input_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[21] = Input_expected_prev[21];
	end
	if (
		( Input_expected_prev[22] !== 1'bx ) && ( Input_prev[22] !== Input_expected_prev[22] )
		&& ((Input_expected_prev[22] !== last_Input_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[22] = Input_expected_prev[22];
	end
	if (
		( Input_expected_prev[23] !== 1'bx ) && ( Input_prev[23] !== Input_expected_prev[23] )
		&& ((Input_expected_prev[23] !== last_Input_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[23] = Input_expected_prev[23];
	end
	if (
		( Input_expected_prev[24] !== 1'bx ) && ( Input_prev[24] !== Input_expected_prev[24] )
		&& ((Input_expected_prev[24] !== last_Input_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[24] = Input_expected_prev[24];
	end
	if (
		( Input_expected_prev[25] !== 1'bx ) && ( Input_prev[25] !== Input_expected_prev[25] )
		&& ((Input_expected_prev[25] !== last_Input_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[25] = Input_expected_prev[25];
	end
	if (
		( Input_expected_prev[26] !== 1'bx ) && ( Input_prev[26] !== Input_expected_prev[26] )
		&& ((Input_expected_prev[26] !== last_Input_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[26] = Input_expected_prev[26];
	end
	if (
		( Input_expected_prev[27] !== 1'bx ) && ( Input_prev[27] !== Input_expected_prev[27] )
		&& ((Input_expected_prev[27] !== last_Input_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[27] = Input_expected_prev[27];
	end
	if (
		( Input_expected_prev[28] !== 1'bx ) && ( Input_prev[28] !== Input_expected_prev[28] )
		&& ((Input_expected_prev[28] !== last_Input_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[28] = Input_expected_prev[28];
	end
	if (
		( Input_expected_prev[29] !== 1'bx ) && ( Input_prev[29] !== Input_expected_prev[29] )
		&& ((Input_expected_prev[29] !== last_Input_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[29] = Input_expected_prev[29];
	end
	if (
		( Input_expected_prev[30] !== 1'bx ) && ( Input_prev[30] !== Input_expected_prev[30] )
		&& ((Input_expected_prev[30] !== last_Input_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[30] = Input_expected_prev[30];
	end
	if (
		( Input_expected_prev[31] !== 1'bx ) && ( Input_prev[31] !== Input_expected_prev[31] )
		&& ((Input_expected_prev[31] !== last_Input_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Input_exp[31] = Input_expected_prev[31];
	end
	if (
		( MemContro_expected_prev !== 1'bx ) && ( MemContro_prev !== MemContro_expected_prev )
		&& ((MemContro_expected_prev !== last_MemContro_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemContro :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemContro_expected_prev);
		$display ("     Real value = %b", MemContro_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MemContro_exp = MemContro_expected_prev;
	end
	if (
		( MemOut_expected_prev[0] !== 1'bx ) && ( MemOut_prev[0] !== MemOut_expected_prev[0] )
		&& ((MemOut_expected_prev[0] !== last_MemOut_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[0] = MemOut_expected_prev[0];
	end
	if (
		( MemOut_expected_prev[1] !== 1'bx ) && ( MemOut_prev[1] !== MemOut_expected_prev[1] )
		&& ((MemOut_expected_prev[1] !== last_MemOut_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[1] = MemOut_expected_prev[1];
	end
	if (
		( MemOut_expected_prev[2] !== 1'bx ) && ( MemOut_prev[2] !== MemOut_expected_prev[2] )
		&& ((MemOut_expected_prev[2] !== last_MemOut_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[2] = MemOut_expected_prev[2];
	end
	if (
		( MemOut_expected_prev[3] !== 1'bx ) && ( MemOut_prev[3] !== MemOut_expected_prev[3] )
		&& ((MemOut_expected_prev[3] !== last_MemOut_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[3] = MemOut_expected_prev[3];
	end
	if (
		( MemOut_expected_prev[4] !== 1'bx ) && ( MemOut_prev[4] !== MemOut_expected_prev[4] )
		&& ((MemOut_expected_prev[4] !== last_MemOut_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[4] = MemOut_expected_prev[4];
	end
	if (
		( MemOut_expected_prev[5] !== 1'bx ) && ( MemOut_prev[5] !== MemOut_expected_prev[5] )
		&& ((MemOut_expected_prev[5] !== last_MemOut_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[5] = MemOut_expected_prev[5];
	end
	if (
		( MemOut_expected_prev[6] !== 1'bx ) && ( MemOut_prev[6] !== MemOut_expected_prev[6] )
		&& ((MemOut_expected_prev[6] !== last_MemOut_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[6] = MemOut_expected_prev[6];
	end
	if (
		( MemOut_expected_prev[7] !== 1'bx ) && ( MemOut_prev[7] !== MemOut_expected_prev[7] )
		&& ((MemOut_expected_prev[7] !== last_MemOut_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[7] = MemOut_expected_prev[7];
	end
	if (
		( MemOut_expected_prev[8] !== 1'bx ) && ( MemOut_prev[8] !== MemOut_expected_prev[8] )
		&& ((MemOut_expected_prev[8] !== last_MemOut_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[8] = MemOut_expected_prev[8];
	end
	if (
		( MemOut_expected_prev[9] !== 1'bx ) && ( MemOut_prev[9] !== MemOut_expected_prev[9] )
		&& ((MemOut_expected_prev[9] !== last_MemOut_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[9] = MemOut_expected_prev[9];
	end
	if (
		( MemOut_expected_prev[10] !== 1'bx ) && ( MemOut_prev[10] !== MemOut_expected_prev[10] )
		&& ((MemOut_expected_prev[10] !== last_MemOut_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[10] = MemOut_expected_prev[10];
	end
	if (
		( MemOut_expected_prev[11] !== 1'bx ) && ( MemOut_prev[11] !== MemOut_expected_prev[11] )
		&& ((MemOut_expected_prev[11] !== last_MemOut_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[11] = MemOut_expected_prev[11];
	end
	if (
		( MemOut_expected_prev[12] !== 1'bx ) && ( MemOut_prev[12] !== MemOut_expected_prev[12] )
		&& ((MemOut_expected_prev[12] !== last_MemOut_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[12] = MemOut_expected_prev[12];
	end
	if (
		( MemOut_expected_prev[13] !== 1'bx ) && ( MemOut_prev[13] !== MemOut_expected_prev[13] )
		&& ((MemOut_expected_prev[13] !== last_MemOut_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[13] = MemOut_expected_prev[13];
	end
	if (
		( MemOut_expected_prev[14] !== 1'bx ) && ( MemOut_prev[14] !== MemOut_expected_prev[14] )
		&& ((MemOut_expected_prev[14] !== last_MemOut_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[14] = MemOut_expected_prev[14];
	end
	if (
		( MemOut_expected_prev[15] !== 1'bx ) && ( MemOut_prev[15] !== MemOut_expected_prev[15] )
		&& ((MemOut_expected_prev[15] !== last_MemOut_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[15] = MemOut_expected_prev[15];
	end
	if (
		( MemOut_expected_prev[16] !== 1'bx ) && ( MemOut_prev[16] !== MemOut_expected_prev[16] )
		&& ((MemOut_expected_prev[16] !== last_MemOut_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[16] = MemOut_expected_prev[16];
	end
	if (
		( MemOut_expected_prev[17] !== 1'bx ) && ( MemOut_prev[17] !== MemOut_expected_prev[17] )
		&& ((MemOut_expected_prev[17] !== last_MemOut_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[17] = MemOut_expected_prev[17];
	end
	if (
		( MemOut_expected_prev[18] !== 1'bx ) && ( MemOut_prev[18] !== MemOut_expected_prev[18] )
		&& ((MemOut_expected_prev[18] !== last_MemOut_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[18] = MemOut_expected_prev[18];
	end
	if (
		( MemOut_expected_prev[19] !== 1'bx ) && ( MemOut_prev[19] !== MemOut_expected_prev[19] )
		&& ((MemOut_expected_prev[19] !== last_MemOut_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[19] = MemOut_expected_prev[19];
	end
	if (
		( MemOut_expected_prev[20] !== 1'bx ) && ( MemOut_prev[20] !== MemOut_expected_prev[20] )
		&& ((MemOut_expected_prev[20] !== last_MemOut_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[20] = MemOut_expected_prev[20];
	end
	if (
		( MemOut_expected_prev[21] !== 1'bx ) && ( MemOut_prev[21] !== MemOut_expected_prev[21] )
		&& ((MemOut_expected_prev[21] !== last_MemOut_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[21] = MemOut_expected_prev[21];
	end
	if (
		( MemOut_expected_prev[22] !== 1'bx ) && ( MemOut_prev[22] !== MemOut_expected_prev[22] )
		&& ((MemOut_expected_prev[22] !== last_MemOut_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[22] = MemOut_expected_prev[22];
	end
	if (
		( MemOut_expected_prev[23] !== 1'bx ) && ( MemOut_prev[23] !== MemOut_expected_prev[23] )
		&& ((MemOut_expected_prev[23] !== last_MemOut_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[23] = MemOut_expected_prev[23];
	end
	if (
		( MemOut_expected_prev[24] !== 1'bx ) && ( MemOut_prev[24] !== MemOut_expected_prev[24] )
		&& ((MemOut_expected_prev[24] !== last_MemOut_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[24] = MemOut_expected_prev[24];
	end
	if (
		( MemOut_expected_prev[25] !== 1'bx ) && ( MemOut_prev[25] !== MemOut_expected_prev[25] )
		&& ((MemOut_expected_prev[25] !== last_MemOut_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[25] = MemOut_expected_prev[25];
	end
	if (
		( MemOut_expected_prev[26] !== 1'bx ) && ( MemOut_prev[26] !== MemOut_expected_prev[26] )
		&& ((MemOut_expected_prev[26] !== last_MemOut_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[26] = MemOut_expected_prev[26];
	end
	if (
		( MemOut_expected_prev[27] !== 1'bx ) && ( MemOut_prev[27] !== MemOut_expected_prev[27] )
		&& ((MemOut_expected_prev[27] !== last_MemOut_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[27] = MemOut_expected_prev[27];
	end
	if (
		( MemOut_expected_prev[28] !== 1'bx ) && ( MemOut_prev[28] !== MemOut_expected_prev[28] )
		&& ((MemOut_expected_prev[28] !== last_MemOut_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[28] = MemOut_expected_prev[28];
	end
	if (
		( MemOut_expected_prev[29] !== 1'bx ) && ( MemOut_prev[29] !== MemOut_expected_prev[29] )
		&& ((MemOut_expected_prev[29] !== last_MemOut_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[29] = MemOut_expected_prev[29];
	end
	if (
		( MemOut_expected_prev[30] !== 1'bx ) && ( MemOut_prev[30] !== MemOut_expected_prev[30] )
		&& ((MemOut_expected_prev[30] !== last_MemOut_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[30] = MemOut_expected_prev[30];
	end
	if (
		( MemOut_expected_prev[31] !== 1'bx ) && ( MemOut_prev[31] !== MemOut_expected_prev[31] )
		&& ((MemOut_expected_prev[31] !== last_MemOut_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemOut_exp[31] = MemOut_expected_prev[31];
	end
	if (
		( MemRead_expected_prev !== 1'bx ) && ( MemRead_prev !== MemRead_expected_prev )
		&& ((MemRead_expected_prev !== last_MemRead_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemRead :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemRead_expected_prev);
		$display ("     Real value = %b", MemRead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MemRead_exp = MemRead_expected_prev;
	end
	if (
		( MemToReg_expected_prev !== 1'bx ) && ( MemToReg_prev !== MemToReg_expected_prev )
		&& ((MemToReg_expected_prev !== last_MemToReg_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemToReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemToReg_expected_prev);
		$display ("     Real value = %b", MemToReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MemToReg_exp = MemToReg_expected_prev;
	end
	if (
		( MemWrite_expected_prev !== 1'bx ) && ( MemWrite_prev !== MemWrite_expected_prev )
		&& ((MemWrite_expected_prev !== last_MemWrite_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemWrite_expected_prev);
		$display ("     Real value = %b", MemWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemWrite_exp = MemWrite_expected_prev;
	end
	if (
		( PCin_expected_prev[0] !== 1'bx ) && ( PCin_prev[0] !== PCin_expected_prev[0] )
		&& ((PCin_expected_prev[0] !== last_PCin_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[0] = PCin_expected_prev[0];
	end
	if (
		( PCin_expected_prev[1] !== 1'bx ) && ( PCin_prev[1] !== PCin_expected_prev[1] )
		&& ((PCin_expected_prev[1] !== last_PCin_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[1] = PCin_expected_prev[1];
	end
	if (
		( PCin_expected_prev[2] !== 1'bx ) && ( PCin_prev[2] !== PCin_expected_prev[2] )
		&& ((PCin_expected_prev[2] !== last_PCin_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[2] = PCin_expected_prev[2];
	end
	if (
		( PCin_expected_prev[3] !== 1'bx ) && ( PCin_prev[3] !== PCin_expected_prev[3] )
		&& ((PCin_expected_prev[3] !== last_PCin_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[3] = PCin_expected_prev[3];
	end
	if (
		( PCin_expected_prev[4] !== 1'bx ) && ( PCin_prev[4] !== PCin_expected_prev[4] )
		&& ((PCin_expected_prev[4] !== last_PCin_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[4] = PCin_expected_prev[4];
	end
	if (
		( PCin_expected_prev[5] !== 1'bx ) && ( PCin_prev[5] !== PCin_expected_prev[5] )
		&& ((PCin_expected_prev[5] !== last_PCin_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[5] = PCin_expected_prev[5];
	end
	if (
		( PCin_expected_prev[6] !== 1'bx ) && ( PCin_prev[6] !== PCin_expected_prev[6] )
		&& ((PCin_expected_prev[6] !== last_PCin_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[6] = PCin_expected_prev[6];
	end
	if (
		( PCin_expected_prev[7] !== 1'bx ) && ( PCin_prev[7] !== PCin_expected_prev[7] )
		&& ((PCin_expected_prev[7] !== last_PCin_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[7] = PCin_expected_prev[7];
	end
	if (
		( PCin_expected_prev[8] !== 1'bx ) && ( PCin_prev[8] !== PCin_expected_prev[8] )
		&& ((PCin_expected_prev[8] !== last_PCin_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[8] = PCin_expected_prev[8];
	end
	if (
		( PCin_expected_prev[9] !== 1'bx ) && ( PCin_prev[9] !== PCin_expected_prev[9] )
		&& ((PCin_expected_prev[9] !== last_PCin_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[9] = PCin_expected_prev[9];
	end
	if (
		( PCin_expected_prev[10] !== 1'bx ) && ( PCin_prev[10] !== PCin_expected_prev[10] )
		&& ((PCin_expected_prev[10] !== last_PCin_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[10] = PCin_expected_prev[10];
	end
	if (
		( PCin_expected_prev[11] !== 1'bx ) && ( PCin_prev[11] !== PCin_expected_prev[11] )
		&& ((PCin_expected_prev[11] !== last_PCin_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[11] = PCin_expected_prev[11];
	end
	if (
		( PCin_expected_prev[12] !== 1'bx ) && ( PCin_prev[12] !== PCin_expected_prev[12] )
		&& ((PCin_expected_prev[12] !== last_PCin_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[12] = PCin_expected_prev[12];
	end
	if (
		( PCin_expected_prev[13] !== 1'bx ) && ( PCin_prev[13] !== PCin_expected_prev[13] )
		&& ((PCin_expected_prev[13] !== last_PCin_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[13] = PCin_expected_prev[13];
	end
	if (
		( PCin_expected_prev[14] !== 1'bx ) && ( PCin_prev[14] !== PCin_expected_prev[14] )
		&& ((PCin_expected_prev[14] !== last_PCin_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[14] = PCin_expected_prev[14];
	end
	if (
		( PCin_expected_prev[15] !== 1'bx ) && ( PCin_prev[15] !== PCin_expected_prev[15] )
		&& ((PCin_expected_prev[15] !== last_PCin_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[15] = PCin_expected_prev[15];
	end
	if (
		( PCin_expected_prev[16] !== 1'bx ) && ( PCin_prev[16] !== PCin_expected_prev[16] )
		&& ((PCin_expected_prev[16] !== last_PCin_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[16] = PCin_expected_prev[16];
	end
	if (
		( PCin_expected_prev[17] !== 1'bx ) && ( PCin_prev[17] !== PCin_expected_prev[17] )
		&& ((PCin_expected_prev[17] !== last_PCin_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[17] = PCin_expected_prev[17];
	end
	if (
		( PCin_expected_prev[18] !== 1'bx ) && ( PCin_prev[18] !== PCin_expected_prev[18] )
		&& ((PCin_expected_prev[18] !== last_PCin_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[18] = PCin_expected_prev[18];
	end
	if (
		( PCin_expected_prev[19] !== 1'bx ) && ( PCin_prev[19] !== PCin_expected_prev[19] )
		&& ((PCin_expected_prev[19] !== last_PCin_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[19] = PCin_expected_prev[19];
	end
	if (
		( PCin_expected_prev[20] !== 1'bx ) && ( PCin_prev[20] !== PCin_expected_prev[20] )
		&& ((PCin_expected_prev[20] !== last_PCin_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[20] = PCin_expected_prev[20];
	end
	if (
		( PCin_expected_prev[21] !== 1'bx ) && ( PCin_prev[21] !== PCin_expected_prev[21] )
		&& ((PCin_expected_prev[21] !== last_PCin_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[21] = PCin_expected_prev[21];
	end
	if (
		( PCin_expected_prev[22] !== 1'bx ) && ( PCin_prev[22] !== PCin_expected_prev[22] )
		&& ((PCin_expected_prev[22] !== last_PCin_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[22] = PCin_expected_prev[22];
	end
	if (
		( PCin_expected_prev[23] !== 1'bx ) && ( PCin_prev[23] !== PCin_expected_prev[23] )
		&& ((PCin_expected_prev[23] !== last_PCin_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[23] = PCin_expected_prev[23];
	end
	if (
		( PCin_expected_prev[24] !== 1'bx ) && ( PCin_prev[24] !== PCin_expected_prev[24] )
		&& ((PCin_expected_prev[24] !== last_PCin_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[24] = PCin_expected_prev[24];
	end
	if (
		( PCin_expected_prev[25] !== 1'bx ) && ( PCin_prev[25] !== PCin_expected_prev[25] )
		&& ((PCin_expected_prev[25] !== last_PCin_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[25] = PCin_expected_prev[25];
	end
	if (
		( PCin_expected_prev[26] !== 1'bx ) && ( PCin_prev[26] !== PCin_expected_prev[26] )
		&& ((PCin_expected_prev[26] !== last_PCin_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[26] = PCin_expected_prev[26];
	end
	if (
		( PCin_expected_prev[27] !== 1'bx ) && ( PCin_prev[27] !== PCin_expected_prev[27] )
		&& ((PCin_expected_prev[27] !== last_PCin_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[27] = PCin_expected_prev[27];
	end
	if (
		( PCin_expected_prev[28] !== 1'bx ) && ( PCin_prev[28] !== PCin_expected_prev[28] )
		&& ((PCin_expected_prev[28] !== last_PCin_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[28] = PCin_expected_prev[28];
	end
	if (
		( PCin_expected_prev[29] !== 1'bx ) && ( PCin_prev[29] !== PCin_expected_prev[29] )
		&& ((PCin_expected_prev[29] !== last_PCin_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[29] = PCin_expected_prev[29];
	end
	if (
		( PCin_expected_prev[30] !== 1'bx ) && ( PCin_prev[30] !== PCin_expected_prev[30] )
		&& ((PCin_expected_prev[30] !== last_PCin_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[30] = PCin_expected_prev[30];
	end
	if (
		( PCin_expected_prev[31] !== 1'bx ) && ( PCin_prev[31] !== PCin_expected_prev[31] )
		&& ((PCin_expected_prev[31] !== last_PCin_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[31] = PCin_expected_prev[31];
	end
	if (
		( REGOut_expected_prev[0] !== 1'bx ) && ( REGOut_prev[0] !== REGOut_expected_prev[0] )
		&& ((REGOut_expected_prev[0] !== last_REGOut_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[0] = REGOut_expected_prev[0];
	end
	if (
		( REGOut_expected_prev[1] !== 1'bx ) && ( REGOut_prev[1] !== REGOut_expected_prev[1] )
		&& ((REGOut_expected_prev[1] !== last_REGOut_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[1] = REGOut_expected_prev[1];
	end
	if (
		( REGOut_expected_prev[2] !== 1'bx ) && ( REGOut_prev[2] !== REGOut_expected_prev[2] )
		&& ((REGOut_expected_prev[2] !== last_REGOut_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[2] = REGOut_expected_prev[2];
	end
	if (
		( REGOut_expected_prev[3] !== 1'bx ) && ( REGOut_prev[3] !== REGOut_expected_prev[3] )
		&& ((REGOut_expected_prev[3] !== last_REGOut_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[3] = REGOut_expected_prev[3];
	end
	if (
		( REGOut_expected_prev[4] !== 1'bx ) && ( REGOut_prev[4] !== REGOut_expected_prev[4] )
		&& ((REGOut_expected_prev[4] !== last_REGOut_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[4] = REGOut_expected_prev[4];
	end
	if (
		( REGOut_expected_prev[5] !== 1'bx ) && ( REGOut_prev[5] !== REGOut_expected_prev[5] )
		&& ((REGOut_expected_prev[5] !== last_REGOut_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[5] = REGOut_expected_prev[5];
	end
	if (
		( REGOut_expected_prev[6] !== 1'bx ) && ( REGOut_prev[6] !== REGOut_expected_prev[6] )
		&& ((REGOut_expected_prev[6] !== last_REGOut_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[6] = REGOut_expected_prev[6];
	end
	if (
		( REGOut_expected_prev[7] !== 1'bx ) && ( REGOut_prev[7] !== REGOut_expected_prev[7] )
		&& ((REGOut_expected_prev[7] !== last_REGOut_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[7] = REGOut_expected_prev[7];
	end
	if (
		( REGOut_expected_prev[8] !== 1'bx ) && ( REGOut_prev[8] !== REGOut_expected_prev[8] )
		&& ((REGOut_expected_prev[8] !== last_REGOut_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[8] = REGOut_expected_prev[8];
	end
	if (
		( REGOut_expected_prev[9] !== 1'bx ) && ( REGOut_prev[9] !== REGOut_expected_prev[9] )
		&& ((REGOut_expected_prev[9] !== last_REGOut_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[9] = REGOut_expected_prev[9];
	end
	if (
		( REGOut_expected_prev[10] !== 1'bx ) && ( REGOut_prev[10] !== REGOut_expected_prev[10] )
		&& ((REGOut_expected_prev[10] !== last_REGOut_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[10] = REGOut_expected_prev[10];
	end
	if (
		( REGOut_expected_prev[11] !== 1'bx ) && ( REGOut_prev[11] !== REGOut_expected_prev[11] )
		&& ((REGOut_expected_prev[11] !== last_REGOut_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[11] = REGOut_expected_prev[11];
	end
	if (
		( REGOut_expected_prev[12] !== 1'bx ) && ( REGOut_prev[12] !== REGOut_expected_prev[12] )
		&& ((REGOut_expected_prev[12] !== last_REGOut_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[12] = REGOut_expected_prev[12];
	end
	if (
		( REGOut_expected_prev[13] !== 1'bx ) && ( REGOut_prev[13] !== REGOut_expected_prev[13] )
		&& ((REGOut_expected_prev[13] !== last_REGOut_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[13] = REGOut_expected_prev[13];
	end
	if (
		( REGOut_expected_prev[14] !== 1'bx ) && ( REGOut_prev[14] !== REGOut_expected_prev[14] )
		&& ((REGOut_expected_prev[14] !== last_REGOut_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[14] = REGOut_expected_prev[14];
	end
	if (
		( REGOut_expected_prev[15] !== 1'bx ) && ( REGOut_prev[15] !== REGOut_expected_prev[15] )
		&& ((REGOut_expected_prev[15] !== last_REGOut_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[15] = REGOut_expected_prev[15];
	end
	if (
		( REGOut_expected_prev[16] !== 1'bx ) && ( REGOut_prev[16] !== REGOut_expected_prev[16] )
		&& ((REGOut_expected_prev[16] !== last_REGOut_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[16] = REGOut_expected_prev[16];
	end
	if (
		( REGOut_expected_prev[17] !== 1'bx ) && ( REGOut_prev[17] !== REGOut_expected_prev[17] )
		&& ((REGOut_expected_prev[17] !== last_REGOut_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[17] = REGOut_expected_prev[17];
	end
	if (
		( REGOut_expected_prev[18] !== 1'bx ) && ( REGOut_prev[18] !== REGOut_expected_prev[18] )
		&& ((REGOut_expected_prev[18] !== last_REGOut_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[18] = REGOut_expected_prev[18];
	end
	if (
		( REGOut_expected_prev[19] !== 1'bx ) && ( REGOut_prev[19] !== REGOut_expected_prev[19] )
		&& ((REGOut_expected_prev[19] !== last_REGOut_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[19] = REGOut_expected_prev[19];
	end
	if (
		( REGOut_expected_prev[20] !== 1'bx ) && ( REGOut_prev[20] !== REGOut_expected_prev[20] )
		&& ((REGOut_expected_prev[20] !== last_REGOut_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[20] = REGOut_expected_prev[20];
	end
	if (
		( REGOut_expected_prev[21] !== 1'bx ) && ( REGOut_prev[21] !== REGOut_expected_prev[21] )
		&& ((REGOut_expected_prev[21] !== last_REGOut_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[21] = REGOut_expected_prev[21];
	end
	if (
		( REGOut_expected_prev[22] !== 1'bx ) && ( REGOut_prev[22] !== REGOut_expected_prev[22] )
		&& ((REGOut_expected_prev[22] !== last_REGOut_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[22] = REGOut_expected_prev[22];
	end
	if (
		( REGOut_expected_prev[23] !== 1'bx ) && ( REGOut_prev[23] !== REGOut_expected_prev[23] )
		&& ((REGOut_expected_prev[23] !== last_REGOut_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[23] = REGOut_expected_prev[23];
	end
	if (
		( REGOut_expected_prev[24] !== 1'bx ) && ( REGOut_prev[24] !== REGOut_expected_prev[24] )
		&& ((REGOut_expected_prev[24] !== last_REGOut_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[24] = REGOut_expected_prev[24];
	end
	if (
		( REGOut_expected_prev[25] !== 1'bx ) && ( REGOut_prev[25] !== REGOut_expected_prev[25] )
		&& ((REGOut_expected_prev[25] !== last_REGOut_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[25] = REGOut_expected_prev[25];
	end
	if (
		( REGOut_expected_prev[26] !== 1'bx ) && ( REGOut_prev[26] !== REGOut_expected_prev[26] )
		&& ((REGOut_expected_prev[26] !== last_REGOut_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[26] = REGOut_expected_prev[26];
	end
	if (
		( REGOut_expected_prev[27] !== 1'bx ) && ( REGOut_prev[27] !== REGOut_expected_prev[27] )
		&& ((REGOut_expected_prev[27] !== last_REGOut_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[27] = REGOut_expected_prev[27];
	end
	if (
		( REGOut_expected_prev[28] !== 1'bx ) && ( REGOut_prev[28] !== REGOut_expected_prev[28] )
		&& ((REGOut_expected_prev[28] !== last_REGOut_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[28] = REGOut_expected_prev[28];
	end
	if (
		( REGOut_expected_prev[29] !== 1'bx ) && ( REGOut_prev[29] !== REGOut_expected_prev[29] )
		&& ((REGOut_expected_prev[29] !== last_REGOut_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[29] = REGOut_expected_prev[29];
	end
	if (
		( REGOut_expected_prev[30] !== 1'bx ) && ( REGOut_prev[30] !== REGOut_expected_prev[30] )
		&& ((REGOut_expected_prev[30] !== last_REGOut_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[30] = REGOut_expected_prev[30];
	end
	if (
		( REGOut_expected_prev[31] !== 1'bx ) && ( REGOut_prev[31] !== REGOut_expected_prev[31] )
		&& ((REGOut_expected_prev[31] !== last_REGOut_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGOut[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGOut_expected_prev);
		$display ("     Real value = %b", REGOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_REGOut_exp[31] = REGOut_expected_prev[31];
	end
	if (
		( ReadData1_expected_prev[0] !== 1'bx ) && ( ReadData1_prev[0] !== ReadData1_expected_prev[0] )
		&& ((ReadData1_expected_prev[0] !== last_ReadData1_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[0] = ReadData1_expected_prev[0];
	end
	if (
		( ReadData1_expected_prev[1] !== 1'bx ) && ( ReadData1_prev[1] !== ReadData1_expected_prev[1] )
		&& ((ReadData1_expected_prev[1] !== last_ReadData1_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[1] = ReadData1_expected_prev[1];
	end
	if (
		( ReadData1_expected_prev[2] !== 1'bx ) && ( ReadData1_prev[2] !== ReadData1_expected_prev[2] )
		&& ((ReadData1_expected_prev[2] !== last_ReadData1_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[2] = ReadData1_expected_prev[2];
	end
	if (
		( ReadData1_expected_prev[3] !== 1'bx ) && ( ReadData1_prev[3] !== ReadData1_expected_prev[3] )
		&& ((ReadData1_expected_prev[3] !== last_ReadData1_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[3] = ReadData1_expected_prev[3];
	end
	if (
		( ReadData1_expected_prev[4] !== 1'bx ) && ( ReadData1_prev[4] !== ReadData1_expected_prev[4] )
		&& ((ReadData1_expected_prev[4] !== last_ReadData1_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[4] = ReadData1_expected_prev[4];
	end
	if (
		( ReadData1_expected_prev[5] !== 1'bx ) && ( ReadData1_prev[5] !== ReadData1_expected_prev[5] )
		&& ((ReadData1_expected_prev[5] !== last_ReadData1_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[5] = ReadData1_expected_prev[5];
	end
	if (
		( ReadData1_expected_prev[6] !== 1'bx ) && ( ReadData1_prev[6] !== ReadData1_expected_prev[6] )
		&& ((ReadData1_expected_prev[6] !== last_ReadData1_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[6] = ReadData1_expected_prev[6];
	end
	if (
		( ReadData1_expected_prev[7] !== 1'bx ) && ( ReadData1_prev[7] !== ReadData1_expected_prev[7] )
		&& ((ReadData1_expected_prev[7] !== last_ReadData1_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[7] = ReadData1_expected_prev[7];
	end
	if (
		( ReadData1_expected_prev[8] !== 1'bx ) && ( ReadData1_prev[8] !== ReadData1_expected_prev[8] )
		&& ((ReadData1_expected_prev[8] !== last_ReadData1_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[8] = ReadData1_expected_prev[8];
	end
	if (
		( ReadData1_expected_prev[9] !== 1'bx ) && ( ReadData1_prev[9] !== ReadData1_expected_prev[9] )
		&& ((ReadData1_expected_prev[9] !== last_ReadData1_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[9] = ReadData1_expected_prev[9];
	end
	if (
		( ReadData1_expected_prev[10] !== 1'bx ) && ( ReadData1_prev[10] !== ReadData1_expected_prev[10] )
		&& ((ReadData1_expected_prev[10] !== last_ReadData1_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[10] = ReadData1_expected_prev[10];
	end
	if (
		( ReadData1_expected_prev[11] !== 1'bx ) && ( ReadData1_prev[11] !== ReadData1_expected_prev[11] )
		&& ((ReadData1_expected_prev[11] !== last_ReadData1_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[11] = ReadData1_expected_prev[11];
	end
	if (
		( ReadData1_expected_prev[12] !== 1'bx ) && ( ReadData1_prev[12] !== ReadData1_expected_prev[12] )
		&& ((ReadData1_expected_prev[12] !== last_ReadData1_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[12] = ReadData1_expected_prev[12];
	end
	if (
		( ReadData1_expected_prev[13] !== 1'bx ) && ( ReadData1_prev[13] !== ReadData1_expected_prev[13] )
		&& ((ReadData1_expected_prev[13] !== last_ReadData1_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[13] = ReadData1_expected_prev[13];
	end
	if (
		( ReadData1_expected_prev[14] !== 1'bx ) && ( ReadData1_prev[14] !== ReadData1_expected_prev[14] )
		&& ((ReadData1_expected_prev[14] !== last_ReadData1_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[14] = ReadData1_expected_prev[14];
	end
	if (
		( ReadData1_expected_prev[15] !== 1'bx ) && ( ReadData1_prev[15] !== ReadData1_expected_prev[15] )
		&& ((ReadData1_expected_prev[15] !== last_ReadData1_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[15] = ReadData1_expected_prev[15];
	end
	if (
		( ReadData1_expected_prev[16] !== 1'bx ) && ( ReadData1_prev[16] !== ReadData1_expected_prev[16] )
		&& ((ReadData1_expected_prev[16] !== last_ReadData1_exp[16]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[16] = ReadData1_expected_prev[16];
	end
	if (
		( ReadData1_expected_prev[17] !== 1'bx ) && ( ReadData1_prev[17] !== ReadData1_expected_prev[17] )
		&& ((ReadData1_expected_prev[17] !== last_ReadData1_exp[17]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[17] = ReadData1_expected_prev[17];
	end
	if (
		( ReadData1_expected_prev[18] !== 1'bx ) && ( ReadData1_prev[18] !== ReadData1_expected_prev[18] )
		&& ((ReadData1_expected_prev[18] !== last_ReadData1_exp[18]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[18] = ReadData1_expected_prev[18];
	end
	if (
		( ReadData1_expected_prev[19] !== 1'bx ) && ( ReadData1_prev[19] !== ReadData1_expected_prev[19] )
		&& ((ReadData1_expected_prev[19] !== last_ReadData1_exp[19]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[19] = ReadData1_expected_prev[19];
	end
	if (
		( ReadData1_expected_prev[20] !== 1'bx ) && ( ReadData1_prev[20] !== ReadData1_expected_prev[20] )
		&& ((ReadData1_expected_prev[20] !== last_ReadData1_exp[20]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[20] = ReadData1_expected_prev[20];
	end
	if (
		( ReadData1_expected_prev[21] !== 1'bx ) && ( ReadData1_prev[21] !== ReadData1_expected_prev[21] )
		&& ((ReadData1_expected_prev[21] !== last_ReadData1_exp[21]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[21] = ReadData1_expected_prev[21];
	end
	if (
		( ReadData1_expected_prev[22] !== 1'bx ) && ( ReadData1_prev[22] !== ReadData1_expected_prev[22] )
		&& ((ReadData1_expected_prev[22] !== last_ReadData1_exp[22]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[22] = ReadData1_expected_prev[22];
	end
	if (
		( ReadData1_expected_prev[23] !== 1'bx ) && ( ReadData1_prev[23] !== ReadData1_expected_prev[23] )
		&& ((ReadData1_expected_prev[23] !== last_ReadData1_exp[23]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[23] = ReadData1_expected_prev[23];
	end
	if (
		( ReadData1_expected_prev[24] !== 1'bx ) && ( ReadData1_prev[24] !== ReadData1_expected_prev[24] )
		&& ((ReadData1_expected_prev[24] !== last_ReadData1_exp[24]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[24] = ReadData1_expected_prev[24];
	end
	if (
		( ReadData1_expected_prev[25] !== 1'bx ) && ( ReadData1_prev[25] !== ReadData1_expected_prev[25] )
		&& ((ReadData1_expected_prev[25] !== last_ReadData1_exp[25]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[25] = ReadData1_expected_prev[25];
	end
	if (
		( ReadData1_expected_prev[26] !== 1'bx ) && ( ReadData1_prev[26] !== ReadData1_expected_prev[26] )
		&& ((ReadData1_expected_prev[26] !== last_ReadData1_exp[26]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[26] = ReadData1_expected_prev[26];
	end
	if (
		( ReadData1_expected_prev[27] !== 1'bx ) && ( ReadData1_prev[27] !== ReadData1_expected_prev[27] )
		&& ((ReadData1_expected_prev[27] !== last_ReadData1_exp[27]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[27] = ReadData1_expected_prev[27];
	end
	if (
		( ReadData1_expected_prev[28] !== 1'bx ) && ( ReadData1_prev[28] !== ReadData1_expected_prev[28] )
		&& ((ReadData1_expected_prev[28] !== last_ReadData1_exp[28]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[28] = ReadData1_expected_prev[28];
	end
	if (
		( ReadData1_expected_prev[29] !== 1'bx ) && ( ReadData1_prev[29] !== ReadData1_expected_prev[29] )
		&& ((ReadData1_expected_prev[29] !== last_ReadData1_exp[29]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[29] = ReadData1_expected_prev[29];
	end
	if (
		( ReadData1_expected_prev[30] !== 1'bx ) && ( ReadData1_prev[30] !== ReadData1_expected_prev[30] )
		&& ((ReadData1_expected_prev[30] !== last_ReadData1_exp[30]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[30] = ReadData1_expected_prev[30];
	end
	if (
		( ReadData1_expected_prev[31] !== 1'bx ) && ( ReadData1_prev[31] !== ReadData1_expected_prev[31] )
		&& ((ReadData1_expected_prev[31] !== last_ReadData1_exp[31]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadData1_exp[31] = ReadData1_expected_prev[31];
	end
	if (
		( ReadData2_expected_prev[0] !== 1'bx ) && ( ReadData2_prev[0] !== ReadData2_expected_prev[0] )
		&& ((ReadData2_expected_prev[0] !== last_ReadData2_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[0] = ReadData2_expected_prev[0];
	end
	if (
		( ReadData2_expected_prev[1] !== 1'bx ) && ( ReadData2_prev[1] !== ReadData2_expected_prev[1] )
		&& ((ReadData2_expected_prev[1] !== last_ReadData2_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[1] = ReadData2_expected_prev[1];
	end
	if (
		( ReadData2_expected_prev[2] !== 1'bx ) && ( ReadData2_prev[2] !== ReadData2_expected_prev[2] )
		&& ((ReadData2_expected_prev[2] !== last_ReadData2_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[2] = ReadData2_expected_prev[2];
	end
	if (
		( ReadData2_expected_prev[3] !== 1'bx ) && ( ReadData2_prev[3] !== ReadData2_expected_prev[3] )
		&& ((ReadData2_expected_prev[3] !== last_ReadData2_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[3] = ReadData2_expected_prev[3];
	end
	if (
		( ReadData2_expected_prev[4] !== 1'bx ) && ( ReadData2_prev[4] !== ReadData2_expected_prev[4] )
		&& ((ReadData2_expected_prev[4] !== last_ReadData2_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[4] = ReadData2_expected_prev[4];
	end
	if (
		( ReadData2_expected_prev[5] !== 1'bx ) && ( ReadData2_prev[5] !== ReadData2_expected_prev[5] )
		&& ((ReadData2_expected_prev[5] !== last_ReadData2_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[5] = ReadData2_expected_prev[5];
	end
	if (
		( ReadData2_expected_prev[6] !== 1'bx ) && ( ReadData2_prev[6] !== ReadData2_expected_prev[6] )
		&& ((ReadData2_expected_prev[6] !== last_ReadData2_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[6] = ReadData2_expected_prev[6];
	end
	if (
		( ReadData2_expected_prev[7] !== 1'bx ) && ( ReadData2_prev[7] !== ReadData2_expected_prev[7] )
		&& ((ReadData2_expected_prev[7] !== last_ReadData2_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[7] = ReadData2_expected_prev[7];
	end
	if (
		( ReadData2_expected_prev[8] !== 1'bx ) && ( ReadData2_prev[8] !== ReadData2_expected_prev[8] )
		&& ((ReadData2_expected_prev[8] !== last_ReadData2_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[8] = ReadData2_expected_prev[8];
	end
	if (
		( ReadData2_expected_prev[9] !== 1'bx ) && ( ReadData2_prev[9] !== ReadData2_expected_prev[9] )
		&& ((ReadData2_expected_prev[9] !== last_ReadData2_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[9] = ReadData2_expected_prev[9];
	end
	if (
		( ReadData2_expected_prev[10] !== 1'bx ) && ( ReadData2_prev[10] !== ReadData2_expected_prev[10] )
		&& ((ReadData2_expected_prev[10] !== last_ReadData2_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[10] = ReadData2_expected_prev[10];
	end
	if (
		( ReadData2_expected_prev[11] !== 1'bx ) && ( ReadData2_prev[11] !== ReadData2_expected_prev[11] )
		&& ((ReadData2_expected_prev[11] !== last_ReadData2_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[11] = ReadData2_expected_prev[11];
	end
	if (
		( ReadData2_expected_prev[12] !== 1'bx ) && ( ReadData2_prev[12] !== ReadData2_expected_prev[12] )
		&& ((ReadData2_expected_prev[12] !== last_ReadData2_exp[12]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[12] = ReadData2_expected_prev[12];
	end
	if (
		( ReadData2_expected_prev[13] !== 1'bx ) && ( ReadData2_prev[13] !== ReadData2_expected_prev[13] )
		&& ((ReadData2_expected_prev[13] !== last_ReadData2_exp[13]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[13] = ReadData2_expected_prev[13];
	end
	if (
		( ReadData2_expected_prev[14] !== 1'bx ) && ( ReadData2_prev[14] !== ReadData2_expected_prev[14] )
		&& ((ReadData2_expected_prev[14] !== last_ReadData2_exp[14]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[14] = ReadData2_expected_prev[14];
	end
	if (
		( ReadData2_expected_prev[15] !== 1'bx ) && ( ReadData2_prev[15] !== ReadData2_expected_prev[15] )
		&& ((ReadData2_expected_prev[15] !== last_ReadData2_exp[15]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[15] = ReadData2_expected_prev[15];
	end
	if (
		( ReadData2_expected_prev[16] !== 1'bx ) && ( ReadData2_prev[16] !== ReadData2_expected_prev[16] )
		&& ((ReadData2_expected_prev[16] !== last_ReadData2_exp[16]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[16] = ReadData2_expected_prev[16];
	end
	if (
		( ReadData2_expected_prev[17] !== 1'bx ) && ( ReadData2_prev[17] !== ReadData2_expected_prev[17] )
		&& ((ReadData2_expected_prev[17] !== last_ReadData2_exp[17]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[17] = ReadData2_expected_prev[17];
	end
	if (
		( ReadData2_expected_prev[18] !== 1'bx ) && ( ReadData2_prev[18] !== ReadData2_expected_prev[18] )
		&& ((ReadData2_expected_prev[18] !== last_ReadData2_exp[18]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[18] = ReadData2_expected_prev[18];
	end
	if (
		( ReadData2_expected_prev[19] !== 1'bx ) && ( ReadData2_prev[19] !== ReadData2_expected_prev[19] )
		&& ((ReadData2_expected_prev[19] !== last_ReadData2_exp[19]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[19] = ReadData2_expected_prev[19];
	end
	if (
		( ReadData2_expected_prev[20] !== 1'bx ) && ( ReadData2_prev[20] !== ReadData2_expected_prev[20] )
		&& ((ReadData2_expected_prev[20] !== last_ReadData2_exp[20]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[20] = ReadData2_expected_prev[20];
	end
	if (
		( ReadData2_expected_prev[21] !== 1'bx ) && ( ReadData2_prev[21] !== ReadData2_expected_prev[21] )
		&& ((ReadData2_expected_prev[21] !== last_ReadData2_exp[21]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[21] = ReadData2_expected_prev[21];
	end
	if (
		( ReadData2_expected_prev[22] !== 1'bx ) && ( ReadData2_prev[22] !== ReadData2_expected_prev[22] )
		&& ((ReadData2_expected_prev[22] !== last_ReadData2_exp[22]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[22] = ReadData2_expected_prev[22];
	end
	if (
		( ReadData2_expected_prev[23] !== 1'bx ) && ( ReadData2_prev[23] !== ReadData2_expected_prev[23] )
		&& ((ReadData2_expected_prev[23] !== last_ReadData2_exp[23]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[23] = ReadData2_expected_prev[23];
	end
	if (
		( ReadData2_expected_prev[24] !== 1'bx ) && ( ReadData2_prev[24] !== ReadData2_expected_prev[24] )
		&& ((ReadData2_expected_prev[24] !== last_ReadData2_exp[24]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[24] = ReadData2_expected_prev[24];
	end
	if (
		( ReadData2_expected_prev[25] !== 1'bx ) && ( ReadData2_prev[25] !== ReadData2_expected_prev[25] )
		&& ((ReadData2_expected_prev[25] !== last_ReadData2_exp[25]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[25] = ReadData2_expected_prev[25];
	end
	if (
		( ReadData2_expected_prev[26] !== 1'bx ) && ( ReadData2_prev[26] !== ReadData2_expected_prev[26] )
		&& ((ReadData2_expected_prev[26] !== last_ReadData2_exp[26]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[26] = ReadData2_expected_prev[26];
	end
	if (
		( ReadData2_expected_prev[27] !== 1'bx ) && ( ReadData2_prev[27] !== ReadData2_expected_prev[27] )
		&& ((ReadData2_expected_prev[27] !== last_ReadData2_exp[27]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[27] = ReadData2_expected_prev[27];
	end
	if (
		( ReadData2_expected_prev[28] !== 1'bx ) && ( ReadData2_prev[28] !== ReadData2_expected_prev[28] )
		&& ((ReadData2_expected_prev[28] !== last_ReadData2_exp[28]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[28] = ReadData2_expected_prev[28];
	end
	if (
		( ReadData2_expected_prev[29] !== 1'bx ) && ( ReadData2_prev[29] !== ReadData2_expected_prev[29] )
		&& ((ReadData2_expected_prev[29] !== last_ReadData2_exp[29]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[29] = ReadData2_expected_prev[29];
	end
	if (
		( ReadData2_expected_prev[30] !== 1'bx ) && ( ReadData2_prev[30] !== ReadData2_expected_prev[30] )
		&& ((ReadData2_expected_prev[30] !== last_ReadData2_exp[30]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[30] = ReadData2_expected_prev[30];
	end
	if (
		( ReadData2_expected_prev[31] !== 1'bx ) && ( ReadData2_prev[31] !== ReadData2_expected_prev[31] )
		&& ((ReadData2_expected_prev[31] !== last_ReadData2_exp[31]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadData2_exp[31] = ReadData2_expected_prev[31];
	end
	if (
		( RegDst_expected_prev !== 1'bx ) && ( RegDst_prev !== RegDst_expected_prev )
		&& ((RegDst_expected_prev !== last_RegDst_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_expected_prev);
		$display ("     Real value = %b", RegDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RegDst_exp = RegDst_expected_prev;
	end
	if (
		( RegWrite_expected_prev !== 1'bx ) && ( RegWrite_prev !== RegWrite_expected_prev )
		&& ((RegWrite_expected_prev !== last_RegWrite_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWrite_expected_prev);
		$display ("     Real value = %b", RegWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RegWrite_exp = RegWrite_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MIPS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg Res;
// wires                                               
wire [2:0] ALUControl;
wire [31:0] ALUOut;
wire ALUSrc;
wire Branch;
wire [31:0] Input;
wire MemContro;
wire [31:0] MemOut;
wire MemRead;
wire MemToReg;
wire MemWrite;
wire [31:0] PCin;
wire [31:0] REGOut;
wire [31:0] ReadData1;
wire [31:0] ReadData2;
wire RegDst;
wire RegWrite;

wire sampler;                             

// assign statements (if any)                          
MIPS i1 (
// port map - connection between master ports and signals/registers   
	.ALUControl(ALUControl),
	.ALUOut(ALUOut),
	.ALUSrc(ALUSrc),
	.Branch(Branch),
	.Clk(Clk),
	.\Input (Input),
	.MemContro(MemContro),
	.MemOut(MemOut),
	.MemRead(MemRead),
	.MemToReg(MemToReg),
	.MemWrite(MemWrite),
	.PCin(PCin),
	.REGOut(REGOut),
	.ReadData1(ReadData1),
	.ReadData2(ReadData2),
	.RegDst(RegDst),
	.RegWrite(RegWrite),
	.Res(Res)
);

// Clk
initial
begin
	Clk = 1'b1;
	# 20000;
	repeat(24)
	begin
		Clk = 1'b0;
		Clk = #20000 1'b1;
		# 20000;
	end
	Clk = 1'b0;
end 

// Res
initial
begin
	Res = 1'b0;
end 

MIPS_vlg_sample_tst tb_sample (
	.Clk(Clk),
	.Res(Res),
	.sampler_tx(sampler)
);

MIPS_vlg_check_tst tb_out(
	.ALUControl(ALUControl),
	.ALUOut(ALUOut),
	.ALUSrc(ALUSrc),
	.Branch(Branch),
	.Input(Input),
	.MemContro(MemContro),
	.MemOut(MemOut),
	.MemRead(MemRead),
	.MemToReg(MemToReg),
	.MemWrite(MemWrite),
	.PCin(PCin),
	.REGOut(REGOut),
	.ReadData1(ReadData1),
	.ReadData2(ReadData2),
	.RegDst(RegDst),
	.RegWrite(RegWrite),
	.sampler_rx(sampler)
);
endmodule

